image: node:latest

stages:
  - backendTest
  - frontendTest
  - backendLint
  - frontendLint
  - badges
  - pages
  - deploy

backendTest:
  stage: backendTest
  script:
    - cd backend/
    - npm i
    - npm run test > $CI_PROJECT_DIR/backendTest_coverage_report.txt 2> $CI_PROJECT_DIR/backendTest_report.txt
  artifacts:
    when: always
    expire_in: 30 days
    paths:
      - backendTest_report.txt
      - backendTest_coverage_report.txt
      - backend/coverage/lcov-report/
  allow_failure: true

frontendTest:
    stage: frontendTest
    tags:
        - docker  # Comme on utilise une image pour isoler on doit utiliser un runner docker 
    image: cypress/base:16.18.1 # Image fournie par cypress avec ce qu'il faut
    script:
        - cd backend/
        - npm i
        - npm run start &
        - cd ../frontend/
        - npm i # Installe ce qui est décrit dans package.json
        - VITE_TEST=1 npm run dev &
        - npx cypress run > $CI_PROJECT_DIR/frontendTest_report.txt # Lance les tests
        - npx nyc report --reporter=text-summary > $CI_PROJECT_DIR/frontendTest_coverage_report.txt # Récupère le coverage
    #    - kill -9 $(ps | grep node | awk '{print $1}') # Cette ligne pourrait permettre de tuer serve
    artifacts:
        when: always
        paths:
            - frontendTest_coverage_report.txt # mise à disposition du coverage
            - frontendTest_report.txt # mise a disposition du compte rendu
            - frontend/coverage/lcov-report/ # mise a disposition de la couverture de code
    allow_failure: true

# Vérification de code
backendLint:
    stage: backendLint
    allow_failure: true
    script:
      - cd backend/
      - npm i
      # Run eslint
      - npm run lint > $CI_PROJECT_DIR/backend_lint_report.txt
    artifacts:
        when: always
        paths:
            - backend_lint_report.txt # mise a disposition du compte rendu

# Vérification de code
frontendLint:
    stage: frontendLint
    allow_failure: true
    script:
      - cd frontend/
      - npm i
      # Run eslint
      - npm run lint > $CI_PROJECT_DIR/frontend_lint_report.txt
    artifacts:
        when: always
        paths:
            - frontend_lint_report.txt # mise a disposition du compte rendu

badges:
  stage: badges
  image: python
  script:
    - pip install anybadge
    - ./backend_badge.sh
    - ./frontend_badge.sh
    - ./backend_lint.sh
    - ./frontend_lint.sh # lancement du script générant le badge lint
  artifacts:
    paths:
      - backend_test.svg
      - backend_coverage_test.svg
      - frontend_test.svg
      - frontend_coverage_test.svg
      - backend_lint.svg
      - frontend_lint.svg
    
pages:
  stage: pages
  script:
    - mkdir -p public
    - mkdir -p public/backend
    - mkdir -p public/frontend
    - cp -r backend/coverage/lcov-report/* public/backend
    - cp -r frontend/coverage/lcov-report/* public/frontend
  artifacts:
    paths:
      - public
    
# Job pour exposer l'API sur Scalingo
# URL d'exposition de l'API : https://casidio.osc-fr1.scalingo.io/
scalingo:
  stage: deploy
  tags:
    - docker
  variables:
    SCALINGO_APP_NAME: casidio # le nom de votre appli chez scalingo
    SCALINGO_REGION: osc-fr1 # l'instance de scalingo sur laquelle votre appli est déployée
    GIT_DEPTH: 0
    PROJECT_DIR: backend # Le répertoire dans le dépôt où est le backend
  image: ruby:3.1.3 # car dpl est codé en Ruby
  script:
    # Installer scalingo CLI
    - curl -O https://cli-dl.scalingo.com/install && bash install
    # Pour indiquer sur le dépôt distant où est le backend 
    # (s'il est à la racine du projet ceci est facultatif, et il est possible de le faire une fois pour toute directement dans l'interface web de scalingo)
    - scalingo --app=$SCALINGO_APP_NAME env-set PROJECT_DIR=$PROJECT_DIR 
    # Se connecter à scalingo avec le token d'authentification
    - scalingo login --api-token $SCALINGO_API_TOKEN
    # Créer une paire de clé ssh pour faire les manips git sur le dépôt scalingo
    - mkdir -p ~/.dpl
    - ssh-keygen -t rsa -N "" -C $HOSTNAME -f ~/.dpl/id_rsa
    # Ajouter à scalingo la clé publique créée précédemment
    - scalingo keys-remove dpl_tmp_key || echo "On la supprime au préalable au cas où elle aurait déjà été ajoutée"
    - scalingo keys-add dpl_tmp_key ~/.dpl/id_rsa.pub
    # Initialiser le dépôt scalingo distant (en forçant si ce n'est pas le première fois)
    - scalingo --app $SCALINGO_APP_NAME git-setup --remote scalingo-dpl --force
    - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash # Installation de nvm
    - export NVM_DIR="$HOME/.nvm"
    - \. "$NVM_DIR/nvm.sh"  
    - \. "$NVM_DIR/bash_completion"
    - nvm install node # Installe la dernière version de node
    - nvm use node
    - cd frontend # On se place dans le répertoire des sources du frontend
    - npm i && npm run buildProd && cp -rf dist/* ../backend/src/frontend # Pour générer la version de production du frontend
    - git config --global user.email "$GITLAB_USER_EMAIL" # Configure git pour pouvoir pousser la version de production du frontend sur le dépot git de scalingo
    - git config --global user.name "$GITLAB_USER_NAME"
    - cd ../backend/src/frontend && git add . && git commit -m "MAJ frontend" # Ajoute les fichiers de production du frontend
    # Pousser la version du backend sur le dépôt scalingo (ce qui va provoquer son déploiement)
    - "GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -i ~/.dpl/id_rsa' git push scalingo-dpl HEAD:refs/heads/main -f"
    # Supprimer la clé temporaire ajoutée
    - scalingo keys-remove dpl_tmp_key || echo Suppression
